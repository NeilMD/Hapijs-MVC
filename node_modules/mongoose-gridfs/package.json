{
  "_args": [
    [
      {
        "raw": "mongoose-gridfs@^0.1.0",
        "scope": null,
        "escapedName": "mongoose-gridfs",
        "name": "mongoose-gridfs",
        "rawSpec": "^0.1.0",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "/home/shinichi/Desktop/proto"
    ]
  ],
  "_from": "mongoose-gridfs@>=0.1.0 <0.2.0",
  "_id": "mongoose-gridfs@0.1.0",
  "_inCache": true,
  "_location": "/mongoose-gridfs",
  "_nodeVersion": "0.12.7",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/mongoose-gridfs-0.1.0.tgz_1460967743431_0.9856573469005525"
  },
  "_npmUser": {
    "name": "lykmapipo",
    "email": "lallyelias87@gmail.com"
  },
  "_npmVersion": "2.11.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongoose-gridfs@^0.1.0",
    "scope": null,
    "escapedName": "mongoose-gridfs",
    "name": "mongoose-gridfs",
    "rawSpec": "^0.1.0",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-gridfs/-/mongoose-gridfs-0.1.0.tgz",
  "_shasum": "2e2c31019faf9a7755c073a7808f5570f79c2491",
  "_shrinkwrap": null,
  "_spec": "mongoose-gridfs@^0.1.0",
  "_where": "/home/shinichi/Desktop/proto",
  "author": {
    "name": "lykmapipo",
    "email": "lallyelias87@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/lykmapipo/mongoose-gridfs/issues"
  },
  "dependencies": {
    "gridfs-stream": "^1.1.1",
    "lodash": "^4.11.1",
    "stream-read": "^1.1.2"
  },
  "description": "mongoose gridfs on top of gridfs-stream",
  "devDependencies": {
    "async": "^1.5.2",
    "chai": "^3.5.0",
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-mocha-test": "^0.12.7",
    "is-stream": "^1.1.0",
    "jshint-stylish": "^2.1.0",
    "load-grunt-tasks": "^3.5.0",
    "mime": "^1.3.4",
    "mocha": "^2.4.5",
    "mongoose": "^4.4.12"
  },
  "directories": {},
  "dist": {
    "shasum": "2e2c31019faf9a7755c073a7808f5570f79c2491",
    "tarball": "https://registry.npmjs.org/mongoose-gridfs/-/mongoose-gridfs-0.1.0.tgz"
  },
  "gitHead": "0dd5375e69d015976e51d3aaadb221fde6d95a3f",
  "homepage": "https://github.com/lykmapipo/mongoose-gridfs#readme",
  "keywords": [
    "mongoose-plugin",
    "mongoose",
    "mongodb",
    "gridfs",
    "gridfs-stream",
    "fs",
    "stream"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "lykmapipo",
      "email": "lallyelias87@gmail.com"
    }
  ],
  "name": "mongoose-gridfs",
  "optionalDependencies": {},
  "readme": "mongoose-gridfs\n===============\n\n[![Build Status](https://travis-ci.org/lykmapipo/mongoose-gridfs.svg?branch=master)](https://travis-ci.org/lykmapipo/mongoose-gridfs)\n\nmongoose gridfs on top of [gridfs-stream](https://github.com/aheckmann/gridfs-stream)\n\n*Note!: Ensure mongoose connection before use*\n\n## Installation\n```sh\n$ npm install --save mongoose mongoose-gridfs\n```\n\n## Usage\n```js\nvar fs = require('fs');\nvar mongoose = require('mongoose');\n\n//mongoose connect\nmongoose.connect('mongodb://localhost/test');\n\n//instantiate mongoose-gridfs\nvar gridfs = require('mongoose-gridfs')({\n  collection:'attachments',\n  model:'Attachment'\n});\n\n//obtain a model\nAttachment = gridfs.model;\n\n//create or save a file\nAttachment.write({\n  filename:'sample.txt', \n  contentType:'text/plain'\n  }, \n  fs.createReadStream('/some/path/sample.txt'), \n  function(error, createdFile){\n    ...\n});\n\n//for larger file size\n//read a file and receive a stream\nvar stream  = Attachment.readById(<objectid>);\n\n//for smaller file size\n//read a file and receive a buffer\nAttachment.readById(<objectid>, function(error, buffer){\n  ...\n});\n\n//remove file details and its content from gridfs\nAttachment.unlinkById(<objectid>, function(error, unlinkedAttachment){\n  ...\n});\n```\n\n## API\n`mongoose-gridfs` wrap [gridfs-stream](https://github.com/aheckmann/gridfs-stream) to provide valid mongoose `schema` and `model` to use with [MongoDB GridFS](https://docs.mongodb.org/manual/core/gridfs/).\n\nEach instance of `mongoose-gridfs` is binded to a specific `GridFS collection` and `mongoose model` or `schema` by using options.\n\n### Options\n- `collection` a root collection to use in GridFS. default to `fs`\n- `model` a model name to use in mongoose. default to `File`\n\nExample\n```js\n//instantiate mongoose-gridfs\nvar gridfs = require('mongoose-gridfs')({\n  collection:'attachments',\n  model:'Attachment'\n});\n```\n\n### Schema & Model\nTo obtain underlying model use\n```js\nvar Attachment = gridfs.model\n```\n\nTo obtain underlying schema for self model registration use\n```js\nvar AttachmentSchema = gridfs.schema;\n\n//attach plugins\n//ensure indexes\n\n//register and export a model\nmodule.export = mongoose.model('Attachment', AttachmentSchema);\n```\n\n### Static Methods\n\n#### `write(fileDetails:Object, stream:Readable, done(error, createdFile))`\nWrite a readable stream into gridfs storage\n\n##### Example\n```js\nAttachment.write({\nfilename:'sample.txt',\ncontentType:'text/plain'\n},\nfs.createReadStream('/some/path/sample.txt'),\nfunction(error, savedAttachment){\n  ...\n});\n```\n\n#### `readById(objectid:ObjectId, [done(error, fileContent)]):Stream`\nRead a file content from gridfs storage.\n\n##### Example for smaller file size\n```js\nAttachment.readById(<objectid>, function(error, content){\n  ...\n})\n```\n\n##### Example for larger file size\n```js\nvar stream = Attachment.readById(<objectid>);\n\nstream.on('error', fn);\n\nstream.on('data', fn);\n\nstream.on('close', fn);\n```\n\n#### `unlinkById(objectid:ObjectId, done(error, unlinkedFile))`\nRemove file details and its content from underlying gridfs collection.\n\n##### Example\n```js\nAttachment.unlinkById(<objectid>, function(error, unlinkedAttachment){\n  ...\n});\n\nor\n\nAttachment.unlink(<objectid>, function(error, unlinkedAttachment){\n  ...\n});\n```\n\n### Instance Methods\n\n#### `write(stream:Readable, done(error, createdFile))`\nWrite a readable stream into gridfs storage\n\n##### Example\n```js\nvar attachment = new Attachment({\n  filename:'sample.txt',\n  contentType:'text/plain'\n});\n\nattachment.write(\nfs.createReadStream('/some/path/sample.txt'),\nfunction(error, savedAttachment){\n  ...\n});\n```\n\n#### `read([done(error, fileContent)]):Stream`\nRead a file content from gridfs storage.\n\n##### Example for smaller file size\n```js\nattachment.read(function(error, content){\n  ...\n})\n```\n\n##### Example for larger file size\n```js\nvar stream = attachment.read();\n\nstream.on('error', fn);\n\nstream.on('data', fn);\n\nstream.on('close', fn);\n```\n\n#### `unlink(done(error, unlinkedFile))`\nRemove file details and its content from underlying gridfs collection.\n\n##### Example\n```js\nattachment.unlink(<objectid>, function(error, unlinkedAttachment){\n  ...\n});\n```\n\n## Literature Reviewed\n- [MongoDB GridFS](https://docs.mongodb.org/manual/core/gridfs/)\n- [gridfs-stream](https://github.com/aheckmann/gridfs-stream)\n\n## Licence\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 lykmapipo & Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. \n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lykmapipo/mongoose-gridfs.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.1.0"
}
